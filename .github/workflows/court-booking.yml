name: Sport Court Booking

on:
  schedule:
    # Regular schedule: Run at 11:00 PM UTC (12:00 AM BST) on Friday so bookings
    # are always made for Saturday only. Schedule is set using UTC time.
    - cron: '0 23 * * 5'  # Friday at 11:00 PM UTC (12:00 AM BST Saturday)
  workflow_dispatch:  # Allows manual triggering

jobs:
  book-courts:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Move Python setup to the beginning so it runs for all trigger types
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    # Verify that requirements.txt exists
    - name: Verify requirements file
      run: |
        if [ -f "requirements.txt" ]; then
          echo "Found requirements.txt file"
        else
          echo "requirements.txt file not found"
          exit 1
        fi
    
    # Pre-install necessary system dependencies
    - name: Install system dependencies
      run: |
        sudo apt-get update
        # Install the specific package that provides libasound2
        sudo apt-get install -y libasound2t64
        # Install other system dependencies needed by Playwright
        sudo apt-get install -y libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libdbus-1-3 libxkbcommon0 \
                              libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libgbm1 libasound2t64 \
                              libnspr4 libnss3 libxss1 libxtst6 libgl1
        
    # Install Python dependencies
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    # Install only Chromium browser without dependencies
    - name: Install Chromium browser
      run: playwright install chromium
        
    # The day checker now happens after Python setup, so we can test the dependency installation
    # even if the day check fails
    - name: Check if correct day for booking
      id: check_day
      run: |
        UTC_DAY_NUM=$(date +%u) # 1-7 (Mon-Sun)
        UTC_HOUR=$(date +%H)    # 00-23
        EVENT_NAME="${{ github.event_name }}"

        echo "Event: $EVENT_NAME, UTC Day Num: $UTC_DAY_NUM, UTC Hour: $UTC_HOUR"
        IS_VALID_FOR_RUN="false"

        # --- Scheduled Runs ---
        if [ "$EVENT_NAME" = "schedule" ]; then
          # Friday 23:00 UTC schedule (this is Saturday 00:00 BST when the script *runs*)
          # Courts should be booked for Saturday 11:00 BST and 12:00 BST
          if [ "$UTC_DAY_NUM" = "5" ] && [ "$UTC_HOUR" = "23" ]; then
            TARGET_DAY_NAME="Saturday" # The booking is for a Saturday
            TARGET_TIME1="11:00"     # Courts booked for 11:00 BST
            TARGET_TIME2="12:00"     # Courts booked for 12:00 BST
            IS_VALID_FOR_RUN="true"
          fi
        # --- Manual Workflow Dispatch ---
        # For manual runs, only allow Saturday bookings
        elif [ "$EVENT_NAME" = "workflow_dispatch" ]; then
          if [ "$UTC_DAY_NUM" = "6" ]; then # Saturday UTC
            TARGET_DAY_NAME="Saturday"
            TARGET_TIME1="11:00" # Courts booked for 11:00 BST
            TARGET_TIME2="12:00" # Courts booked for 12:00 BST
            IS_VALID_FOR_RUN="true"
          fi
        fi

        if [ "$IS_VALID_FOR_RUN" = "true" ]; then
          echo "IS_VALID_DAY=true" >> $GITHUB_ENV
          echo "BOOKING_DAY=$TARGET_DAY_NAME" >> $GITHUB_ENV
          echo "BOOKING_TIME1=$TARGET_TIME1" >> $GITHUB_ENV
          echo "BOOKING_TIME2=$TARGET_TIME2" >> $GITHUB_ENV
          echo "Setting BOOKING_DAY=$TARGET_DAY_NAME, TIME1=$TARGET_TIME1, TIME2=$TARGET_TIME2"
        else
          echo "IS_VALID_DAY=false" >> $GITHUB_ENV
          echo "Skipping court booking - not a configured schedule or dispatch day."
        fi
    
    - name: Add random delay
      if: env.IS_VALID_DAY == 'true' && github.event_name == 'schedule'  # Only add delay for scheduled runs on valid booking days
      run: |
        # Add random delay between 10 and 30 seconds for all scheduled runs
        MIN_DELAY=10    # 10 seconds
        MAX_DELAY=30    # 30 seconds
        RANDOM_DELAY=$(( $RANDOM % (MAX_DELAY - MIN_DELAY + 1) + MIN_DELAY ))
        echo "Adding random delay of $RANDOM_DELAY seconds"
        echo "Current time: $(date)"
        echo "Will run booking in $RANDOM_DELAY seconds"
        
        sleep $RANDOM_DELAY
        
    - name: Run booking script
      if: env.IS_VALID_DAY == 'true'
      id: booking
      env:
        LTA_USERNAME: ${{ secrets.LTA_USERNAME }}
        LTA_PASSWORD: ${{ secrets.LTA_PASSWORD }}
        LTA_USERNAME2: ${{ secrets.LTA_USERNAME2 }}
        LTA_PASSWORD2: ${{ secrets.LTA_PASSWORD2 }}
      run: python court_booker.py

    - name: Upload screenshots and read results
      if: env.IS_VALID_DAY == 'true'
      id: results
      run: |
        # First handle the booking results
        if [ -f booking_results.txt ]; then
          RESULTS=$(cat booking_results.txt)
          echo "BOOKING_RESULTS<<EOF" >> $GITHUB_ENV
          echo "$RESULTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        else
          echo "BOOKING_RESULTS=No booking results file found" >> $GITHUB_ENV
        fi
      
    - name: Upload screenshots
      if: env.IS_VALID_DAY == 'true' && hashFiles('*.png') != ''
      uses: actions/upload-artifact@v4
      with:
        name: booking-screenshots-${{ github.run_id }}
        path: |
          *.png
        retention-days: 5
        compression-level: 9  # Maximum compression
        overwrite: true      # Overwrite if artifact exists

    - name: Send email notification
      if: env.IS_VALID_DAY == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "Court Booking Results - ${{ env.BOOKING_DAY }} ${{ env.BOOKING_TIME1 }}-${{ env.BOOKING_TIME2 }}"
        body: |
          Hi team,

          I've just attempted to book the courts for you. See below for the details:

          Booking Details:
          ----------------
          ${{ env.BOOKING_RESULTS }}

          Remember: If you need to cancel or change any bookings, you'll need to do that through the club website.

          Best regards,
          Dan's Offshore Booking Team
        to: ${{ secrets.NOTIFICATION_EMAILS }}
        from: Dan's Offshore Booking Team 