name: Sport Court Booking

on:
  schedule:
    # Regular schedule: Run at 11:01 PM UTC (12:01 AM BST) on Saturday and 4:34 UTC on Thursday
    # This means it will run:
    # - Every Saturday at 12:01 AM BST (11:01 PM UTC)
    # - Every Thursday at 4:34 AM UTC (5:34 AM BST)
    # Schedule is set using UTC time
    - cron: '1 23 * * 6'  # Saturday at 11:01 PM UTC (12:01 AM BST)
    - cron: '34 4 * * 4' # Thursday at 4:34 AM UTC
    # Special test run on January 1st at 5:34 AM London time
    - cron: '34 4 1 1 *'
  workflow_dispatch:  # Allows manual triggering

jobs:
  book-courts:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Add random delay
      if: github.event_name == 'schedule'  # Only add delay for scheduled runs, not manual ones
      run: |
        # Get current day of week (1-7, where 1 is Monday)
        DAY=$(date +%u)
        
        if [ "$DAY" = "6" ]; then
          # Saturday: delay between 10 seconds and 85 seconds
          MIN_DELAY=10    # 10 seconds
          MAX_DELAY=85   # 85 seconds
          RANDOM_DELAY=$(( $RANDOM % (MAX_DELAY - MIN_DELAY + 1) + MIN_DELAY ))
          echo "Saturday booking: Adding random delay of $RANDOM_DELAY seconds"
          echo "Current time: $(date)"
          echo "Will run booking in $RANDOM_DELAY seconds"
        elif [ "$DAY" = "4" ]; then
          # Thursday: delay between 15 minutes and 26 minutes (to land between 5:49 and 6:00 AM)
          MIN_DELAY=900   # 15 minutes in seconds
          MAX_DELAY=1560  # 26 minutes in seconds
          RANDOM_DELAY=$(( $RANDOM % (MAX_DELAY - MIN_DELAY + 1) + MIN_DELAY ))
          echo "Thursday booking: Adding random delay of $(( RANDOM_DELAY / 60 )) minutes"
        fi
        
        sleep $RANDOM_DELAY
    
    - name: Check if correct day for booking
      id: check_day
      run: |
        # Get current date components
        DAY=$(date +%u)
        DATE=$(date +%d)
        MONTH=$(date +%m)
        
        # Special case for January 1st test
        if [ "$DATE" = "01" ] && [ "$MONTH" = "01" ]; then
          echo "IS_VALID_DAY=true" >> $GITHUB_ENV
          echo "BOOKING_DAY=Wednesday (Test)" >> $GITHUB_ENV
          echo "BOOKING_TIME1=19:00" >> $GITHUB_ENV
          echo "BOOKING_TIME2=20:00" >> $GITHUB_ENV
        # Regular Thursday/Saturday check
        elif [ "$DAY" = "4" ]; then
          echo "IS_VALID_DAY=true" >> $GITHUB_ENV
          echo "BOOKING_DAY=Thursday" >> $GITHUB_ENV
          echo "BOOKING_TIME1=19:00" >> $GITHUB_ENV
          echo "BOOKING_TIME2=20:00" >> $GITHUB_ENV
        elif [ "$DAY" = "6" ]; then
          echo "IS_VALID_DAY=true" >> $GITHUB_ENV
          echo "BOOKING_DAY=Saturday" >> $GITHUB_ENV
          echo "BOOKING_TIME1=11:00" >> $GITHUB_ENV
          echo "BOOKING_TIME2=12:00" >> $GITHUB_ENV
        else
          echo "IS_VALID_DAY=false" >> $GITHUB_ENV
          echo "Skipping court booking - not Thursday or Saturday"
        fi
    
    - name: Set up Python
      if: env.IS_VALID_DAY == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      if: env.IS_VALID_DAY == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install playwright python-dotenv
        playwright install chromium
        
    - name: Run booking script
      if: env.IS_VALID_DAY == 'true'
      id: booking
      env:
        LTA_USERNAME: ${{ secrets.LTA_USERNAME }}
        LTA_PASSWORD: ${{ secrets.LTA_PASSWORD }}
        LTA_USERNAME2: ${{ secrets.LTA_USERNAME2 }}
        LTA_PASSWORD2: ${{ secrets.LTA_PASSWORD2 }}
      run: python court_booker.py

    - name: Upload screenshots
      if: env.IS_VALID_DAY == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: booking-screenshots
        path: |
          *.png
        retention-days: 5
        compression-level: 6  # Optional: Added for better compression
        overwrite: true      # Optional: Will overwrite if artifact exists

    - name: Read booking results
      if: env.IS_VALID_DAY == 'true'
      id: results
      run: |
        if [ -f booking_results.txt ]; then
          RESULTS=$(cat booking_results.txt)
          echo "BOOKING_RESULTS<<EOF" >> $GITHUB_ENV
          echo "$RESULTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        else
          echo "BOOKING_RESULTS=No booking results file found" >> $GITHUB_ENV
        fi

    - name: Send email notification
      if: env.IS_VALID_DAY == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "Telford Park Tennis Court Booking Results - ${{ env.BOOKING_DAY }} ${{ env.BOOKING_TIME1 }}-${{ env.BOOKING_TIME2 }}"
        body: |
          Hi team,

          I've just attempted to book the courts for you. Here's what happened:

          Booking Details:
          ----------------
          ${{ env.BOOKING_RESULTS }}

          Additional Information:
          ----------------------
          - I tried to book courts 5, 4, 3, 2, and 1 in order of preference
          - If I got a court for the first hour, I tried to get the same one for the second hour
          - This was an automated booking attempt at ${{ github.event_name == 'schedule' && 'scheduled time' || 'manual trigger' }}

          If you need to check the full details or see any error screenshots, you can find them here:
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          Remember: If you need to cancel or change any bookings, you'll need to do that through the Telford Park Tennis Club website.

          Best regards,
          Dan's Booking Team
          (on behalf of ${{ secrets.BOOKING_NAMES }})
        to: ${{ secrets.NOTIFICATION_EMAILS }}
        from: Dan's Booking Team 