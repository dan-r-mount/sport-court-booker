name: Sport Court Booking

on:
  schedule:
    # Regular schedule: Run at 11:00 PM UTC (12:00 AM BST) on Friday and 4:34 UTC on Thursday
    # This means it will run:
    # - Every Friday at 11:00 PM UTC (12:00 AM BST Saturday)
    # - Every Thursday at 4:34 AM UTC (5:34 AM BST)
    # Schedule is set using UTC time
    - cron: '0 23 * * 5'  # Friday at 11:00 PM UTC (12:00 AM BST Saturday)
    - cron: '34 4 * * 4'  # Thursday at 4:34 AM UTC (5:34 AM BST)
  workflow_dispatch:  # Allows manual triggering

jobs:
  book-courts:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # The day checker serves as a secondary safeguard to the cron schedule.
    # While the cron schedule ensures the workflow runs on specific days,
    # this check provides additional protection for:
    # 1. Manual triggers through workflow_dispatch
    # 2. Handling time zone differences (Friday night UTC = Saturday BST)
    # 3. Preventing issues if someone modifies the cron schedule
    # 4. Setting the appropriate time slots based on the day
    - name: Check if correct day for booking
      id: check_day
      run: |
        # Get current day of week (1-7, where 1 is Monday)
        DAY=$(date +%u)
        
        # For Friday night cron job that runs at 11:00 PM UTC (12:00 AM BST Saturday)
        # We need to check if it's day 5 (Friday) but treat it as Saturday booking
        if [ "$DAY" = "4" ]; then
          # Thursday case
          echo "IS_VALID_DAY=true" >> $GITHUB_ENV
          echo "BOOKING_DAY=Thursday" >> $GITHUB_ENV
          echo "BOOKING_TIME1=19:00" >> $GITHUB_ENV
          echo "BOOKING_TIME2=20:00" >> $GITHUB_ENV
        elif [ "$DAY" = "5" ]; then
          # Friday night (11:00 PM UTC) is midnight Saturday in BST
          echo "IS_VALID_DAY=true" >> $GITHUB_ENV
          echo "BOOKING_DAY=Saturday" >> $GITHUB_ENV
          echo "BOOKING_TIME1=11:00" >> $GITHUB_ENV
          echo "BOOKING_TIME2=12:00" >> $GITHUB_ENV
        else
          echo "IS_VALID_DAY=false" >> $GITHUB_ENV
          echo "Skipping court booking - not Thursday or Saturday"
        fi
    
    - name: Add random delay
      if: env.IS_VALID_DAY == 'true' && github.event_name == 'schedule'  # Only add delay for scheduled runs on valid booking days
      run: |
        # Add random delay between 10 and 30 seconds for all scheduled runs
        MIN_DELAY=10    # 10 seconds
        MAX_DELAY=30    # 30 seconds
        RANDOM_DELAY=$(( $RANDOM % (MAX_DELAY - MIN_DELAY + 1) + MIN_DELAY ))
        echo "Adding random delay of $RANDOM_DELAY seconds"
        echo "Current time: $(date)"
        echo "Will run booking in $RANDOM_DELAY seconds"
        
        sleep $RANDOM_DELAY
    
    # Only proceed with setting up Python and dependencies if it's a valid booking day
    - name: Set up Python
      if: env.IS_VALID_DAY == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'  # Enable pip caching
    
    # Verify that requirements.txt exists
    - name: Verify requirements file
      if: env.IS_VALID_DAY == 'true'
      run: |
        if [ -f "requirements.txt" ]; then
          echo "Found requirements.txt file"
        else
          echo "requirements.txt file not found"
          exit 1
        fi

    # Cache Playwright browsers to avoid reinstalling each time
    - name: Cache Playwright browsers
      if: env.IS_VALID_DAY == 'true'
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.os }}-${{ hashFiles('requirements.txt') }}-chromium
        restore-keys: |
          playwright-${{ runner.os }}-${{ hashFiles('requirements.txt') }}-
          playwright-${{ runner.os }}-
    
    - name: Install dependencies
      if: env.IS_VALID_DAY == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Only install Chromium with minimal dependencies if it's not already cached
        if [ ! -d ~/.cache/ms-playwright/chromium-* ]; then
          playwright install chromium --with-deps
        else
          echo "Using cached Playwright browsers"
        fi
        
    - name: Run booking script
      if: env.IS_VALID_DAY == 'true'
      id: booking
      env:
        LTA_USERNAME: ${{ secrets.LTA_USERNAME }}
        LTA_PASSWORD: ${{ secrets.LTA_PASSWORD }}
        LTA_USERNAME2: ${{ secrets.LTA_USERNAME2 }}
        LTA_PASSWORD2: ${{ secrets.LTA_PASSWORD2 }}
      run: python court_booker.py

    - name: Upload screenshots and read results
      if: env.IS_VALID_DAY == 'true'
      id: results
      run: |
        # First handle the booking results
        if [ -f booking_results.txt ]; then
          RESULTS=$(cat booking_results.txt)
          echo "BOOKING_RESULTS<<EOF" >> $GITHUB_ENV
          echo "$RESULTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        else
          echo "BOOKING_RESULTS=No booking results file found" >> $GITHUB_ENV
        fi
      
    - name: Upload screenshots
      if: env.IS_VALID_DAY == 'true' && hashFiles('*.png') != ''
      uses: actions/upload-artifact@v4
      with:
        name: booking-screenshots-${{ github.run_id }}
        path: |
          *.png
        retention-days: 5
        compression-level: 9  # Maximum compression
        overwrite: true      # Overwrite if artifact exists

    - name: Send email notification
      if: env.IS_VALID_DAY == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "Telford Park Tennis Court Booking Results - ${{ env.BOOKING_DAY }} ${{ env.BOOKING_TIME1 }}-${{ env.BOOKING_TIME2 }}"
        body: |
          Hi team,

          I've just attempted to book the courts for you. Here's what I managed to do:

          Booking Details:
          ----------------
          ${{ env.BOOKING_RESULTS }}

          Remember: If you need to cancel or change any bookings, you'll need to do that through the Telford Park Tennis Club website.

          Best regards,
          Dan's Offshore Booking Team
        to: ${{ secrets.NOTIFICATION_EMAILS }}
        from: Dan's Offshore Booking Team 